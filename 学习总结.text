1、nacos上读取命名空间，读取的是命名空间ID；
2、linux配置静态网络，直接修改网络配置文件，设置static和IPADDR=192.168.56.99;
3、设置虚拟机网络，先设置虚拟机网卡，再设置静态ip地址；
4、测试某一个端口是否可通 用telnet ip 端口号；
5、查看某一个进程 ps-ef | grep 服务名  ps是查看进程 grep是匹配正则表达式；
6、nginx：教程笔记网站：https://www.cnblogs.com/wenhaozou/p/15864361.html
    http全局块：
    http 全局块配置的指令包括文件引入(引入外部配置文件)、MIME-TYPE 定义、日志自定义、连接超时时间、单链接请求数上限等
    server块：
    每个 http 块可以包括多个 server 块，而每个 server 块就相当于一个虚拟主机
    每个 server 块也分为全局 server 块，以及可以同时包含多个 locaton 块；
7、nginx用在前端，后端用gateway均衡；
8、java -jar gateway.jar --spring.cloud.bootstrap.location=bootstrap.yaml & 加& 表示后台运行服务
9、linux运行nacos，需要关闭防火墙才可以访问页面；
10、启动redis
   根据上面的操作已经将redis安装完成了。在目录/usr/local/redis 输入下面命令启动redis
   ./bin/redis-server& ./redis.conf
11、安装linux显示没有数据源，说明系统没装好，需要设置系统的数据源，并且设置成光驱启动就要可以，然后再换成硬盘启动；
12、linux切换成root用户 su root 输入密码
13、curl命令就是访问http地址可以加参数请求
14、rm -rf 删除
15、mv 移动
16、source命令通常用于重新执行刚修改的初始化文件,使之立即生效,而不必注销并重新登录。
17、关闭防火墙  systemctl stop firewalld
18、网络的重启 service network restart
19、linux中sh是执行shell脚本
20、linux相关知识文档：https://github.com/CyC2018/CS-Notes/blob/master/notes/Linux.md
21、source /etc/profile # 刷新配置文件
22、一、常用注解@NotEmpty，@NotBlank，@NotNull介绍
   包位置：javax.validation.constraints.xxx
   @NotEmpty 用在集合上面，一般用来校验List类型(不能注释枚举)，而且长度必须大于0
   @NotBlank 用在String上面，一般用来校验String类型不能为空，而且调用trim()后，长度必须大于0
   @NotNull 用在所有类型上面，一般用来校验Integer类型不能为空，但可以为empty。
   需要搭配@Valid使用，在检验Controller的入参是否符合规范时
23、foreach元素的属性主要有 item，index，collection，open，separator，close。
   item：集合中元素迭代时的别名，该参数为必选。
   index：在list和数组中，index是元素的序号，在map中，index是元素的key，该参数可选
   open：foreach代码的开始符号，一般是(和close=")"合用。常用在in()、values()时。该参数可选
   separator：元素之间的分隔符，例如在in()的时候，separator=","会自动在元素中间用“,“隔开，避免手动输入逗号导致sql错误，如in(1,2,)这样。该参数可选。
   close：foreach代码的关闭符号，一般是)和open="("合用。常用在in()、values()时。该参数可选。
   collection：要做foreach的对象，作为入参时，List对象默认用"list"代替作为键；数组对象有"array"代替作为键；Map对象没有默认的键。
   当然在作为入参时可以使用@Param("keyName")来设置键，设置keyName后，list和array将会失效。除了入参这种情况外，还有一种作为参数对象的某个字段的时候。
24、服务器名字不能带下划线，无法识别下划线，并且@EnableFeignClients是给要调用其他服务的类加
25、用调用openfeign接口时，如果是请求体需要加@RequestBody
26、1<<0 这表示1左移0位置，左边为主 1>>0 1右移1位
27、nacos 单机运行命令 startup.cmd -m standalone
28、序列化和反序列化不能用基础类型 int换成Integert  long换成Long
29、final 修饰的变量或者是引用类型表示不可变的，不能再被重新分配
30、// 使用线程池来处理大量的OpenFeign接口访问
   ExecutorService executorService = Executors.newFixedThreadPool(10);
   for (int i = 0; i < 1000; i++) {
       executorService.submit(() -> {
           // 这里是OpenFeign接口的调用代码
           // ...
       });
   }
   executorService.shutdown();
31、MVCC原理：那么事务在执行快照读时，可以通过以下的规则来确定undo log版本链上的哪个版本数据可见。

   如果当前undo log的版本的trx_id<min_trx_id，说明该版本对应的事务在生成ReadView之前就已经提交了，因此是可见的。

   如果当前undo log的版本的trx_id≥max_trx_id，说明该版本对应的事务在生成ReadView之后才开始的，因此是不可见的。

   如果当前undo log的版本的trx_id∈[min_trx_id，max_trx_id)，如果在这个范围里，还要判断trx_id是否在m_ids中：

           在m_ids中，说明版本对应的事务未提交，因此是不可见的。

           不在m_ids中，说明版本对应的事务已经提交，因此是可见的。

   如果当前undo log的版本的trx_id=creator_trxt_id，说明事务正在访问自己修改的数据，因此是可见的。
32、kafka消息积压问题：增加分区
33、docker logs 容器id  查看容器日志
34、docker pull tomcat 拉镜像 docker images 查看镜像
35、docker run -p 8080(宿主机)：8080(docker服务端口) tomcat：8.0  端口映射  docker -d 后台运行
36、docker inspect 容器名 可以查看docker的所有运行容器的ip
37、docker exec -it tomcat01 cat /etc/hosts 进入容器内
38、docker进去运行的容器里无法使用vi，需要切换成root用户进入容器，docker exec -it --user root 1837cf8cd4b9 /bin/bash
    然后运行先执行命令：apt-get update
    然后执行：apt-get install vim
39、docker容器里面的服务所在位置：opt目录下面
40、linux中../表示上一层目录
41、netstat 命令是一个监控 TCP / IP 网络的非常有用的工具，它可以显示路由表、实际的网络连接以及每一个网络接口设备的状态信息
42、zookeepr的乐观锁用的时版本号
43、linux修改配置文件后需要 source +文件名
44、linux一定要关闭防火墙
45、netstat -alnp | grep 2181 linux查看端口号
46、linux tail命令用途是按照要求将指定的文件的最后部分输出到标准设备，一般是终端，通俗来讲，就是把某个档案文件的最后几行显示t
到终端上，如果该档案有更新，tail会自动刷新，确保你看到最新的档案内容。tail -f filename
47、 yum install  xxx ，yum -y install  xx
    这两种方式，用起来的作用是一样的，都能成功的对软件进行操作。那不同的地方就在于①在安装或卸载的过程中，会询问用户 ：is that ok？ ②则是将y直接以参数的方式附在指令上，后面就不会有这种询问语句了。
48、Arrays.sort()排序规则 (a,b)表示原来位置 a, b 比较器里面大于等于0就交换位置 a - b, 说明a大于b就交换位置，所以小的b就在前面，就是升序了
49、docker run -d -p  小p表示主机端口:容器端口  大P是随机映射
50、docker --name 别名 容器名
51、Docker-V 挂载 挂载宿主机的一个目录。
    譬如我要启动一个centos容器，宿主机的/test目录挂载到容器的/soft目录，可通过以下方式指定：
    docker run -it -v /test:/soft centos /bin/bash
    冒号":"前面的目录是宿主机目录，后面的目录是容器内目录
    注意事项
    容器目录不可以为相对路径
    宿主机目录如果不存在，则会自动生成
    这样宿主机目录和容器内的目录就互通.可以互相传输文件
52、reids设置密码
      127.0.0.1:6379> config get requirepass  # 获取密码，为空
      1) "requirepass"
      2) ""
      127.0.0.1:6379> config set requirepass "123456"  # 设置密码123456
      OK
53、docker拷贝容器中的文件到宿主机上：
    docker cp <containerId>:/path/to/file /path/on/host
    其中，`<containerId>`为容器ID或名称，`/path/to/file`为容器内文件的路径，`/path/on/host`为宿主机上保存文件的路径。
    如果需要将宿主机上的文件拷贝到容器内，只需调换源和目的地路径即可，例如：
    docker cp /path/on/host <containerId>:/path/to/file
54、docker -e e的作用是指定容器内的环境变量。
             mysql的镜像中是有一个初始化脚本的，这个脚本会读取这个变量初始化root的密码。
             dockerfile中使用ENV指令指定环境变量 ######环境变量
55、linux查看某一个端口或者应用是否在运行中  netstat -anp | grep 80
56、关于基本数据类型与包装数据类型的使用标准如下：
   1） 【强制】所有的 POJO 类属性必须使用包装数据类型。
   2） 【强制】RPC 方法的返回值和参数必须使用包装数据类型。
   3） 【推荐】所有的局部变量使用基本数据类型。
   说明：POJO 类属性没有初值是提醒使用者在需要使用时，必须自己显式地进行赋值，任何 NPE 问题，或
   者入库检查，都由使用者来保证。
   正例：数据库的查询结果可能是 null，因为自动拆箱，用基本数据类型接收有 NPE 风险。
57、异或运算，相同为0，不同为1 ^
58、docker一键安装
    Docker官方和国内daocloud都提供了一键安装的脚本，使得Docker的安装更加便捷。
    官方的一键安装方式：
    curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
    国内 daocloud一键安装命令：
    curl -sSL https://get.daocloud.io/docker | sh
59、线程池 ThreadPoolExector:
    corePoolSize:指定了线程池中的线程数量，它的数量决定了添加的任务是开辟新的线程去执行，还是放到workQueue任务队列中去；
    maximumPoolSize:指定了线程池中的最大线程数量，这个参数会根据你使用的workQueue任务队列的类型，决定线程池会开辟的最大线程数量；
    keepAliveTime:当线程池中空闲线程数量超过corePoolSize时，多余的线程会在多长时间内被销毁；
    unit:keepAliveTime的单位
    workQueue:任务队列，被添加到线程池中，但尚未被执行的任务；它一般分为直接提交队列、有界任务队列、无界任务队列、优先任务队列几种；
    threadFactory:线程工厂，用于创建线程，一般用默认即可；
    handler:拒绝策略；当任务太多来不及处理时，如何拒绝任务；
60、Scanner in = new Scanner(System.in);
    in.nextInt();
    in.nextLine();会将回车当作“”空字符串返回给接受值；
61、接口也有class对象
63、远程新建分支，本地不显示，需要git fetch
64、groupid和artifactId被统称为“坐标”是为了保证项目唯一性而提出的，如果你要把你项目弄到maven本地仓库去，
    你想要找到你的项目就必须根据这两个id去查找。groupId和artifactId是maven管理项目包时用作区分的字段，
    就像是地图上的坐标。artifactId：artifactId一般是项目名或者模块名。groupId：groupId分为几个字段，
    例如cn.com.fullstack，前面的com叫【域】，后面的是你自己起的域名。groupId一般分为多个段，这里我只
    说两段，第一段为域，第二段为公司名称。域又分为org、com、cn等等许多，其中org为非营利组织，com为商业组织。
    举个apache公司的tomcat项目例子：这个项目的groupId是org.apache，它的域是org（因为tomcat是非营利项目），
    公司名称是apache，artigactId是tomcat。
65、 watch com.meicloud.meiqing.workflow.engine.dao.CdpProcessQueryDao getSelectRemiCodeProcess '{params,returnObj,throwExp}'  -n 5  -x 4
     watch+方法名(绝对地址) '{params,returnObj,throwExp}'  -n 5  -x 4
     参数，返回值，异常
66、字符出的排序：
    第一种：Character[] array = new Character[]{'A','a','b','B'};
                  Arrays.sort(array, (o1,o2)-> {
                      return Character.toLowerCase(o1) - (Character.toLowerCase(o1));
                  });
    第二种：
        List<Character> letters = new ArrayList<>();
        letters.add('A');
        letters.add('a');
        letters.add('b');
        letters.add('B');
        letters.sort(new Comparator<Character>() {
                    @Override
                    public int compare(Character o1, Character o2) {
                        return Character.toLowerCase(o1) - Character.toLowerCase(o2);
                    }
                });
67、map如何保证输入输出保证顺序一致性，用LinkedHashMap
68、在典型的RPC(远程过程调用)系统中，使用者(或客户端)向提供者(或服务器)发出请求以调用远程方法。在提供者向使用者发送响应之前，请求要经过几个模块。以下是完整事件链的高级概述:
   1. 消费者:消费者通过调用代表远程服务的本地代理对象上的方法来发起RPC请求。
   2. 序列化:方法参数被序列化成可以通过网络发送的格式。这通常是使用序列化框架(如Protobuf或JSON)完成的。
   3. 负载平衡器:请求被发送到负载平衡器，它负责跨提供者的多个实例分发请求。负载平衡器可以使用不同的算法来确
      定将请求发送到哪个实例，例如轮询或最少连接。
   4. 注册表:负载平衡器咨询注册表以获取提供程序的可用实例列表。注册中心是一个中央存储库，用于跟踪提供程序的
      可用实例及其元数据，如IP地址、端口号和运行状况。
   5. 网络:负载平衡器通过网络将请求发送到提供程序的选定实例。
   6. 反序列化:在提供程序端对请求进行反序列化，并从序列化格式重构方法参数。
   7. 提供者:提供者调用请求的方法并生成响应。
   8. 序列化:响应被序列化成可以通过网络发送的格式。
   9. 网络:响应通过网络发送回消费者。
   10. 反序列化:在消费者端对响应进行反序列化，远程方法调用的结果从序列化的格式重新构造。
   11. 返回:结果返回给使用者，RPC调用完成。
   总之，一个完整的RPC调用涉及几个模块，包括序列化、负载平衡、注册、网络和反序列化。序列化和反序列化模块负责
   在它们的Java对象表示和可通过网络发送的格式之间转换方法参数和响应。负载平衡和注册模块负责选择适当的提供者实
   例来处理请求。了解完整的事件链对于构建健壮且可伸缩的RPC系统至关重要。
69、ZooKeeper和Nacos都是流行的注册表技术，通常用于RPC(远程过程调用)项目。虽然这两种技术提供了类似的功能，
    但它们在重点和特性上存在一些差异。
    ZooKeeper是一个分布式协调服务，旨在为分布式系统提供可靠和高可用的注册表。ZooKeeper以其简单、可扩展性
    和容错性而闻名。ZooKeeper提供了一个分层的命名空间，用于存储分布式系统的元数据，如配置数据、同步数据、服
    务元数据等。由于其可靠性和可扩展性，ZooKeeper经常被用作RPC项目的注册表。另一方面，Nacos是一个动态的服
    务发现和配置管理平台，旨在简化微服务的开发和管理。Nacos为服务注册、服务发现和服务治理提供了一组全面的特性。
    Nacos支持多种数据格式，包括JSON、YAML和XML，并提供基于web的管理控制台，便于配置和监控。由于Nacos的灵活
    性和易用性，它经常被用于基于微服务的架构中。
    总之，虽然ZooKeeper和Nacos都提供了与注册表技术相似的功能，但它们有不同的侧重点和特性。ZooKeeper旨在为
    分布式系统提供可靠且高可用的注册表，而Nacos旨在简化微服务的开发和管理。注册表技术的选择取决于应用程序的特定
    需求，例如可伸缩性、可用性和易用性。
70、Dubbo 支持多种序列化方式? https://zhuanlan.zhihu.com/p/529704258
   JDK 自带的序列化：不支持跨语言调用 ；性能差
   JSON：性能差
   ProtoBuf ：支持跨语言
   hessian2(默认)：支持跨语言
   Protostuff：支持跨语言
   Kryo：新引入的，只支持JAVA
   FST：新引入的，只支持JAVA
71、dubbo的作用：
   面向接口的远程方法调用
   智能容错和负载均衡
   服务自动注册和发现。
   自定义序列化协议
72、
   Dubbo 架构中的核心角色有哪些？
   Container： 服务运行容器，负责加载、运行服务提供者。必须。
   Provider： 暴露服务的服务提供方，会向注册中心注册自己提供的服务。必须。
   Consumer： 调用远程服务的服务消费方，会向注册中心订阅自己所需的服务。必须。
   Registry： 服务注册与发现的注册中心。注册中心会返回服务提供者地址列表给消费者。非必须。
   Monitor： 统计服务的调用次数和调用时间的监控中心。服务消费者和提供者会定时发送统计数据到监控中心。非必须。

73、arthas的使用：watch com.meicloud.jiebao.base.data.impl.BdBmBillTypeFeeTypeRelServiceImpl save
                '{params,returnObj,throwExp}'  -n 5  -x 4
74、springBoot加载resources下的xml文件，默认情况下，Spring Boot将扫描项目的src/main/resources目录下具有以下
    名称的XML文件:
    - applicationContext -{概要}. xml
    其中{profile}是活动Spring配置文件的名称。例如，如果活动配置文件是dev, Spring Boot将查找名为applicationContext-dev.xml的XML文件。
    如果XML文件具有不同的名称或位于不同的位置，则可以使用@ImportResource注释指定XML文件的位置。例如，如果你在src/main/resources/config
    目录下有一个名为myConfig.xml的XML文件，你可以像这样将它导入到Spring Boot应用程序中;
75、Spring Boot默认配置了一个 PropertySourcesPlaceholderConfigurer Bean，它将从 application.properties 和 application.yml 文件中获取属性。
76、HandlerInterceptorAdapter类是Spring框架提供的一个类，它允许您在Spring MVC应用程序中拦截和定制HTTP请求和响应的处理。
   # # #概述
   HandlerInterceptorAdapter类是一个实现HandlerInterceptor接口的抽象类。它为创建自定义拦截器提供了方便的基本实现。拦截器是可用于对HTTP请求和响应执行预处理和后处理任务的组件。
   # # #使用
   要使用HandlerInterceptorAdapter类，您需要创建一个子类并覆盖您想要自定义的方法。下面是一些你可以重写的方法:
   —preHandle:在实际的处理程序方法被调用之前调用这个方法。它允许您执行预处理任务，例如日志记录、身份验证或授权检查。如果需要，还可以修改请求或响应对象。该方法应返回true以继续处理请求，或返回false以停止处理并返回响应。
   - postHandle:这个方法在处理程序方法被调用之后，但是在视图被渲染之前被调用。它允许您执行后处理任务，例如修改模型或向视图添加附加属性。如果需要，还可以修改请求或响应对象。
   - afterCompletion:这个方法在视图被渲染并且响应被发送到客户端之后被调用。它允许您执行清理任务或日志记录。即使在请求处理期间发生异常，也始终调用此方法。
   要使用自定义拦截器，需要将其注册到Spring MVC配置中。这可以通过扩展WebMvcConfigurerAdapter类和重写addInterceptors方法来实现。这里有一个例子;
77、OncePerRequestFilter类是Spring框架提供的一个类，它允许您创建自定义过滤器，以便在Spring应用程序中应用于HTTP请求。
   # # #概述
   OncePerRequestFilter类是一个抽象类，它扩展了GenericFilterBean类并实现了Filter接口。它为创建每个请求只执行一次的过滤器提供了方便的基本实现。
   # # #使用
   要使用OncePerRequestFilter类，您需要创建一个子类并覆盖doFilterInternal方法。对于每个传入的HTTP请求调用此方法，并允许您对请求和响应对象执行自定义处理。
   public class MyFilter extends OncePerRequestFilter {

       @Override
       protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
           // Custom processing logic here

           // Call the next filter in the chain
           filterChain.doFilter(request, response);
       }
   }
78、一个典型的 Maven 构建生命周期是由以下几个阶段的序列组成的：
   阶段	处理	描述
   prepare-resources	资源拷贝	本阶段可以自定义需要拷贝的资源
   compile	编译	本阶段完成源代码编译
   package	打包	本阶段根据 pom.xml 中描述的打包配置创建 JAR / WAR 包
   install	安装	本阶段在本地 / 远程仓库中安装工程包
79、通过 Maven 设置激活 Profile
    <activeProfiles>
       <activeProfile>test</activeProfile>
    </activeProfiles>
80、maven的clean
    在清理阶段，Maven执行以下任务:
   1. 删除目标目录:目标目录是编译类、打包工件和生成文档的默认输出目录。Maven删除此目录以删除以前构建中的任何构件。
   通过执行清理阶段，您可以确保您的项目从一个干净的石板开始，没有以前构建生成的任何工件。当您想要确保一致和可复制的构建环境时，这是非常有用的。
81、除了 application 属性文件，Spring Boot还将尝试使用 application-{profile}
    的命名惯例加载profile特定的文件。 例如，如果你的应用程序激活了名为 prod 的配置文件
   （spring.profiles.active=prod）并使用YAML文件，那么 application.yaml 和
   application-prod.yaml 都将被考虑。特定文件(profiles)的属性与标准的 application.properties 的位置相同，
   特定文件总是优先于非特定文件。 如果指定了几个配置文件，则采用最后胜出的策略。 例如，如果配置文件 prod,live
   是由 spring.profiles.active 属性指定的，application-prod.properties 中的值可以被
   application-live.properties 中的值所覆盖。
82、